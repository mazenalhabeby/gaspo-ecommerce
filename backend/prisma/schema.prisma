generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CUSTOMER
  MANAGER
  GUEST
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum DiscountType {
  PERCENT
  FIXED
}

enum ActivityAction {
  CREATE_PRODUCT
  DELETE_USER
  LOGIN
  LOGOUT
  UPDATE_ORDER
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  RETURNED
  CANCELLED
}

enum ShipmentStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  FAILED
  RETURNED
}

enum ShippingMethod {
  STANDARD
  EXPRESS
  FREESHIP
  PICKUP
}

enum StockMovementType {
  IN
  OUT
}

enum WeightUnit {
  KG
  G
  LB
  OZ
}

enum ReturnStatus {
  PENDING
  APPROVED
  REJECTED
  RECEIVED
  REFUNDED
}

enum DiscountApplyTo {
  EACH
  SECOND_ONLY
  NTH_ONLY
  SUBTOTAL
}

model User {
  id                String         @id @default(cuid())
  email             String         @unique
  password          String
  firstName         String
  lastName          String
  phone             String?        @db.VarChar(20)
  avatarUrl         String?
  role              UserRole       @default(CUSTOMER)
  isVerified        Boolean        @default(false)
  isActive          Boolean        @default(true)
  billingAddress    Address?       @relation("Billing", fields: [billingAddressId], references: [id])
  billingAddressId  String?
  shippingAddress   Address?       @relation("Shipping", fields: [shippingAddressId], references: [id])
  shippingAddressId String?
  preferredLanguage String?        @default("en")
  currency          String?        @default("EUR")
  metadata          Json?
  cart              Cart?
  orders            Order[]
  reviews           Review[]
  ActivityLogs      ActivityLog[]
  Wishlists         Wishlist[]
  Notification      Notification[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  Product           Product[]
}

model Address {
  id            String  @id @default(cuid())
  country       String
  state         String?
  city          String
  zip           String
  street1       String
  street2       String?
  company       String?
  billingUsers  User[]  @relation("Billing")
  shippingUsers User[]  @relation("Shipping")
  Orders        Order[]
}

model Category {
  id           String                @id @default(cuid())
  slug         String                @unique
  imageUrl     String?
  parentId     String?
  parent       Category?             @relation("CategoryHierarchy", fields: [parentId], references: [id])
  products     Product[]
  children     Category[]            @relation("CategoryHierarchy")
  translations CategoryTranslation[]
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

model CategoryTranslation {
  id          String   @id @default(cuid())
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  language    String
  name        String
  description String

  @@unique([categoryId, language])
}

model Product {
  id                  String               @id @default(cuid())
  name                String
  slug                String               @unique
  description         String
  currency            String?              @default("EUR")
  price               Float?
  stock               Int?
  weight              Int?
  weightUnit          WeightUnit           @default(KG)
  sku                 String?              @unique
  metadata            Json?
  packages            Json?
  images              ProductImage[]
  reviews             Review[]
  variants            ProductVariant[]
  PriceHistorys       PriceHistory[]
  cartItems           CartItem[]
  orderItems          OrderItem[]
  Wishlists           Wishlist[]
  StockMovements      StockMovement[]
  ProductTranslations ProductTranslation[]
  categories          Category?            @relation(fields: [categoryId], references: [id])
  categoryId          String?
  bundles             Product[]            @relation("BundleProducts")
  bundledIn           Product[]            @relation("BundleProducts")
  bundleMetadata      Json?
  productDiscounts    ProductDiscount[]
  status              ProductStatus        @default(DRAFT)
  seoTitle            String?
  seoDesc             String?
  variantFields       String[]             @default([])
  createdById         String?
  createdBy           User?                @relation(fields: [createdById], references: [id])
  pricingUnit         String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model ProductTranslation {
  id              String   @id @default(cuid())
  productId       String
  product         Product  @relation(fields: [productId], references: [id])
  language        String
  name            String
  description     String
  descriptionJson Json?
  seoTitle        String?
  seoDesc         String?
  createdAt       DateTime @default(now())

  @@unique([productId, language])
}

model ProductVariant {
  id             String                      @id @default(cuid())
  productId      String
  product        Product                     @relation(fields: [productId], references: [id])
  name           String
  slug           String                      @unique
  sku            String?                     @unique
  price          Float
  stock          Int
  metadata       Json?
  attributes     VariantAttribute[]
  StockMovements StockMovement[]
  ProductImage   ProductImage[]
  translations   ProductVariantTranslation[]
  createdAt      DateTime                    @default(now())
  updatedAt      DateTime                    @updatedAt
}

model ProductVariantTranslation {
  id        String         @id @default(cuid())
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  language  String
  name      String
  createdAt DateTime       @default(now())

  @@unique([variantId, language])
}

model VariantAttribute {
  id           String                        @id @default(cuid())
  name         String
  value        String
  variantId    String
  variant      ProductVariant                @relation(fields: [variantId], references: [id])
  translations VariantAttributeTranslation[]

  @@unique([variantId, name])
}

model VariantAttributeTranslation {
  id          String           @id @default(cuid())
  attributeId String
  attribute   VariantAttribute @relation(fields: [attributeId], references: [id])
  language    String
  name        String
  value       String
  createdAt   DateTime         @default(now())

  @@unique([attributeId, language])
}

model ProductDiscount {
  id          String          @id @default(cuid())
  productId   String
  product     Product         @relation(fields: [productId], references: [id])
  minQuantity Int
  maxQuantity Int?
  type        DiscountType
  value       Float
  applyTo     DiscountApplyTo
  createdAt   DateTime        @default(now())
}

model ProductImage {
  id        String          @id @default(cuid())
  url       String
  altText   String?
  position  Int             @default(0)
  productId String
  product   Product         @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  variantId String?
}

model PriceHistory {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  price     Float
  changedAt DateTime @default(now())
  reason    String?
}

model Review {
  id         String   @id @default(cuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  rating     Int
  title      String?
  comment    String?
  isVerified Boolean  @default(false)
  isApproved Boolean  @default(true)
  createdAt  DateTime @default(now())
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)
}

model Order {
  id                String            @id @default(cuid())
  userId            String?
  user              User?             @relation(fields: [userId], references: [id])
  guestName         String?
  guestEmail        String?
  guestPhone        String?
  status            OrderStatus       @default(PENDING)
  totalAmount       Float
  items             OrderItem[]
  shippingAddress   Address?          @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String?
  shippingMethod    ShippingMethod?
  trackingNumber    String?
  paymentMethod     String?
  paidAt            DateTime?
  DiscountCode      DiscountCode?     @relation(fields: [discountCodeId], references: [id])
  discountCodeId    String?
  invoiceNumber     String?           @unique
  currency          String?           @default("EUR")
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED)
  Shipments         Shipment[]
  ReturnRequests    ReturnRequest[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model OrderItem {
  id             String          @id @default(cuid())
  orderId        String
  order          Order           @relation(fields: [orderId], references: [id])
  productId      String
  product        Product         @relation(fields: [productId], references: [id])
  quantity       Int
  basePrice      Float
  discount       Float?
  tax            Float?
  totalPrice     Float
  ReturnRequests ReturnRequest[]
}

model DiscountCode {
  id         String       @id @default(cuid())
  code       String       @unique
  type       DiscountType
  value      Float
  active     Boolean      @default(true)
  usageLimit Int?
  usedCount  Int          @default(0)
  expiresAt  DateTime?
  orders     Order[]
}

model ActivityLog {
  id        String         @id @default(cuid())
  userId    String?
  user      User?          @relation(fields: [userId], references: [id])
  action    ActivityAction
  targetId  String?
  metadata  Json?
  createdAt DateTime       @default(now())
}

model Wishlist {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model StockMovement {
  id        String            @id @default(cuid())
  productId String
  product   Product           @relation(fields: [productId], references: [id])
  variantId String?
  variant   ProductVariant?   @relation(fields: [variantId], references: [id])
  type      StockMovementType
  quantity  Int
  reason    String?
  createdAt DateTime          @default(now())
}

model Shipment {
  id             String         @id @default(cuid())
  orderId        String
  order          Order          @relation(fields: [orderId], references: [id])
  carrier        String
  trackingNumber String
  labelUrl       String?
  status         ShipmentStatus @default(PENDING)
  shippedAt      DateTime?
  deliveredAt    DateTime?
  metadata       Json?
  lastSyncedAt   DateTime?
  failureReason  String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model ReturnRequest {
  id           String       @id @default(cuid())
  orderId      String
  order        Order        @relation(fields: [orderId], references: [id])
  orderItemId  String
  orderItem    OrderItem    @relation(fields: [orderItemId], references: [id])
  reason       String
  status       ReturnStatus @default(PENDING)
  quantity     Int          @default(1)
  refundAmount Float?
  resolution   String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Notification {
  id      String   @id @default(cuid())
  userId  String?
  user    User?    @relation(fields: [userId], references: [id])
  title   String
  message String
  type    String
  read    Boolean  @default(false)
  sentAt  DateTime @default(now())
}
